{
  "posts": [
    {
      "id": "modern-javascript-features",
      "title": "Modern JavaScript Features You Should Know in 2024",
      "slug": "modern-javascript-features",
      "author": "Miguel",
      "date": "2024-12-15",
      "excerpt": "Explore the latest JavaScript features including optional chaining, nullish coalescing, and top-level await that make development more efficient and enjoyable.",
      "tags": ["JavaScript", "ES2024", "Web Development"],
      "content": [
        {
          "type": "section",
          "title": "Optional Chaining (?.)",
          "content": "Optional chaining allows you to safely access deeply nested object properties without having to validate each reference in the chain explicitly.",
          "code": "// Before optional chaining\nif (user && user.address && user.address.street) {\n  console.log(user.address.street);\n}\n\n// With optional chaining\nconsole.log(user?.address?.street);"
        },
        {
          "type": "section",
          "title": "Nullish Coalescing (??)",
          "content": "The nullish coalescing operator provides a way to fall back to a default value when dealing with null or undefined, but not other falsy values like 0 or empty strings.",
          "code": "// Using || operator (problematic with falsy values)\nconst config = {\n  timeout: 0,\n  retries: null\n};\n\nconst timeout = config.timeout || 5000; // 5000 (wrong!)\nconst retries = config.retries ?? 3; // 3 (correct!)"
        },
        {
          "type": "section",
          "title": "Top-Level Await",
          "content": "You can now use await at the top level of modules, making it easier to work with asynchronous code during module initialization.",
          "code": "// In a module file\nconst data = await fetch('/api/config').then(r => r.json());\nconst connection = await connectToDatabase();\n\nexport { data, connection };"
        },
        {
          "type": "section",
          "title": "Array Methods: at(), findLast(), and findLastIndex()",
          "content": "New array methods provide more intuitive ways to access and find elements.",
          "code": "const arr = [1, 2, 3, 4, 5];\n\n// Negative indexing with at()\nconsole.log(arr.at(-1)); // 5\nconsole.log(arr.at(-2)); // 4\n\n// Finding from the end\nconst users = [\n  { id: 1, active: false },\n  { id: 2, active: true },\n  { id: 3, active: true }\n];\n\nconst lastActiveUser = users.findLast(user => user.active);\nconsole.log(lastActiveUser); // { id: 3, active: true }"
        },
        {
          "type": "section",
          "title": "Private Fields and Methods",
          "content": "True privacy in JavaScript classes using the # prefix for private fields and methods.",
          "code": "class BankAccount {\n  #balance = 0;\n  #accountNumber;\n\n  constructor(accountNumber) {\n    this.#accountNumber = accountNumber;\n  }\n\n  #validateAmount(amount) {\n    return amount > 0 && typeof amount === 'number';\n  }\n\n  deposit(amount) {\n    if (this.#validateAmount(amount)) {\n      this.#balance += amount;\n    }\n  }\n\n  getBalance() {\n    return this.#balance;\n  }\n}"
        },
        {
          "type": "section",
          "title": "Logical Assignment Operators",
          "content": "Combine logical operators with assignment for more concise code.",
          "code": "// Logical OR assignment (||=)\nuser.name ||= 'Anonymous';\n\n// Logical AND assignment (&&=)\nuser.isAdmin &&= user.permissions.includes('admin');\n\n// Logical nullish assignment (??=)\nconfig.timeout ??= 5000;"
        },
        {
          "type": "conclusion",
          "content": "These modern JavaScript features significantly improve code readability, safety, and developer experience. As browser support continues to improve, incorporating these features into your development workflow will make your code more robust and maintainable."
        }
      ]
    },
    {
      "id": "react-performance-optimization",
      "title": "React Performance Optimization with Custom Hooks",
      "slug": "react-performance-optimization",
      "author": "Miguel",
      "date": "2024-12-10",
      "excerpt": "Learn how to build custom React hooks that optimize performance through memoization, debouncing, and virtual scrolling techniques.",
      "tags": ["React", "Performance", "Hooks"],
      "content": [
        {
          "type": "section",
          "title": "React Performance Bottlenecks",
          "content": "Before diving into solutions, it's important to understand what causes performance issues in React applications. Common culprits include unnecessary re-renders, expensive computations, and inefficient state management."
        },
        {
          "type": "section",
          "title": "Creating a Debounced Hook",
          "content": "Debouncing is essential for handling rapid user inputs like search queries or form validation.",
          "code": "import { useState, useEffect } from 'react';\n\nfunction useDebounce(value, delay) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n\n// Usage\nfunction SearchComponent() {\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm, 300);\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      // Perform search API call\n      searchAPI(debouncedSearchTerm);\n    }\n  }, [debouncedSearchTerm]);\n\n  return (\n    <input\n      value={searchTerm}\n      onChange={(e) => setSearchTerm(e.target.value)}\n      placeholder=\"Search...\"\n    />\n  );\n}"
        },
        {
          "type": "section",
          "title": "Memoization Hook for Expensive Calculations",
          "content": "For computationally expensive operations, we can create a custom hook that combines useMemo with additional logic.",
          "code": "import { useMemo, useRef } from 'react';\n\nfunction useExpensiveCalculation(calculate, dependencies) {\n  const previousDeps = useRef();\n  const previousResult = useRef();\n\n  const result = useMemo(() => {\n    const hasChanged = !previousDeps.current || \n      dependencies.some((dep, index) => dep !== previousDeps.current[index]);\n\n    if (hasChanged) {\n      console.log('Performing expensive calculation...');\n      previousResult.current = calculate();\n      previousDeps.current = dependencies;\n    }\n\n    return previousResult.current;\n  }, dependencies);\n\n  return result;\n}\n\n// Usage\nfunction DataProcessor({ data, filters }) {\n  const processedData = useExpensiveCalculation(\n    () => data.filter(item => filters.every(filter => filter(item))),\n    [data, filters]\n  );\n\n  return <DataTable data={processedData} />;\n}"
        },
        {
          "type": "section",
          "title": "Virtual Scrolling Hook",
          "content": "For large lists, virtual scrolling can dramatically improve performance by only rendering visible items.",
          "code": "import { useState, useEffect, useMemo } from 'react';\n\nfunction useVirtualScroll({\n  items,\n  itemHeight,\n  containerHeight,\n  overscan = 5\n}) {\n  const [scrollTop, setScrollTop] = useState(0);\n\n  const visibleItems = useMemo(() => {\n    const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\n    const endIndex = Math.min(\n      items.length - 1,\n      Math.floor((scrollTop + containerHeight) / itemHeight) + overscan\n    );\n\n    return items.slice(startIndex, endIndex + 1).map((item, index) => ({\n      ...item,\n      index: startIndex + index\n    }));\n  }, [items, itemHeight, containerHeight, scrollTop, overscan]);\n\n  const totalHeight = items.length * itemHeight;\n\n  return {\n    visibleItems,\n    totalHeight,\n    scrollTop,\n    setScrollTop\n  };\n}"
        },
        {
          "type": "conclusion",
          "content": "Custom hooks for performance optimization provide reusable solutions that can significantly improve your React application's responsiveness. By implementing debouncing, memoization, and virtual scrolling through custom hooks, you create maintainable and efficient code that scales well across your application."
        }
      ]
    },
    {
      "id": "css-container-queries",
      "title": "CSS Container Queries: The Future of Responsive Design",
      "slug": "css-container-queries",
      "author": "Miguel",
      "date": "2024-12-05",
      "excerpt": "Discover how CSS Container Queries enable components to respond to their container size rather than viewport, creating truly modular responsive components.",
      "tags": ["CSS", "Responsive Design", "Container Queries"],
      "content": [
        {
          "type": "section",
          "title": "Container Queries",
          "content": "Traditional media queries respond to viewport dimensions, but Container Queries allow elements to respond to their immediate container's size. This creates more flexible, reusable components."
        },
        {
          "type": "section",
          "title": "Setting Up Container Contexts",
          "content": "To use container queries, you first need to establish a containment context using the container-type property.",
          "code": "/* Establish containment context */\n.card-container {\n  container-type: inline-size;\n  container-name: card;\n}\n\n/* Alternative shorthand */\n.card-container {\n  container: card / inline-size;\n}"
        },
        {
          "type": "section",
          "title": "Writing Container Queries",
          "content": "Container queries use the @container rule to define responsive behavior based on the container's dimensions.",
          "code": "/* Default card layout */\n.card {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  padding: 1rem;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n}\n\n.card-image {\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n}\n\n.card-content {\n  flex: 1;\n}\n\n/* When container is wider than 400px */\n@container card (min-width: 400px) {\n  .card {\n    flex-direction: row;\n    align-items: center;\n  }\n  \n  .card-image {\n    width: 150px;\n    height: 150px;\n    flex-shrink: 0;\n  }\n}\n\n/* When container is wider than 600px */\n@container card (min-width: 600px) {\n  .card {\n    padding: 2rem;\n  }\n  \n  .card-image {\n    width: 200px;\n    height: 200px;\n  }\n}"
        },
        {
          "type": "section",
          "title": "Responsive Navigation",
          "content": "Here's how to create a navigation component that adapts to its container size.",
          "code": "/* Navigation container */\n.nav-container {\n  container-type: inline-size;\n  container-name: navigation;\n}\n\n/* Default mobile-first navigation */\n.nav {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.nav-toggle {\n  display: block;\n  background: none;\n  border: 1px solid #333;\n  padding: 0.5rem;\n  cursor: pointer;\n}\n\n.nav-menu {\n  display: none;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.nav-menu.active {\n  display: flex;\n}\n\n/* When container is wide enough for horizontal layout */\n@container navigation (min-width: 500px) {\n  .nav {\n    flex-direction: row;\n    align-items: center;\n    justify-content: space-between;\n  }\n  \n  .nav-toggle {\n    display: none;\n  }\n  \n  .nav-menu {\n    display: flex !important;\n    flex-direction: row;\n    gap: 2rem;\n  }\n}"
        },
        {
          "type": "section",
          "title": "Container Query Units",
          "content": "Container queries introduce new units that are relative to the container's dimensions.",
          "code": "/* Container query length units */\n.responsive-text {\n  /* 1% of container's inline size (width in horizontal languages) */\n  font-size: 4cqi;\n  \n  /* 1% of container's block size (height in horizontal languages) */\n  line-height: 2cqb;\n  \n  /* 1% of the smaller of cqi and cqb */\n  padding: 2cqmin;\n  \n  /* 1% of the larger of cqi and cqb */\n  margin: 1cqmax;\n}"
        },
        {
          "type": "section",
          "title": "Best Practices and Browser Support",
          "content": "Container queries are well-supported in modern browsers. Here are some best practices for implementation:",
          "list": [
            "Use progressive enhancement with fallbacks for older browsers",
            "Combine container queries with traditional media queries when needed",
            "Name your containers for better maintainability",
            "Consider performance implications with deeply nested containers"
          ]
        },
        {
          "type": "conclusion",
          "content": "CSS Container Queries revolutionize how we think about responsive design, enabling truly modular components that adapt to their context. As browser support continues to improve, container queries will become an essential tool for modern web development."
        }
      ]
    },
    {
      "id": "typescript-node-api",
      "title": "Building Type-Safe APIs with TypeScript and Node.js",
      "slug": "typescript-node-api",
      "author": "Miguel",
      "date": "2024-11-28",
      "excerpt": "A comprehensive guide to building robust, type-safe REST APIs using TypeScript, Express, and modern development practices.",
      "tags": ["TypeScript", "Node.js", "API"]
    },
    {
      "id": "webassembly-rust-performance",
      "title": "WebAssembly and Rust: Supercharging Web Performance",
      "slug": "webassembly-rust-performance",
      "author": "Miguel",
      "date": "2024-11-20",
      "excerpt": "Learn how to integrate Rust-compiled WebAssembly modules into your web applications for near-native performance in the browser.",
      "tags": ["WebAssembly", "Rust", "Performance"]
    },
    {
      "id": "next-js-app-router",
      "title": "Mastering Next.js 13 App Router: A Complete Guide",
      "slug": "next-js-app-router",
      "author": "Miguel",
      "date": "2024-11-15",
      "excerpt": "Deep dive into Next.js 13's new App Router, exploring server components, nested layouts, and the future of React applications.",
      "tags": ["Next.js", "React", "SSR"]
    }
  ]
}